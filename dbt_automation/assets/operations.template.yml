version: 1
description: "Yaml template to get you started on automating your dbt work. DO NOT EDIT this, make a copy and use"
warehouse: <bigquery or postgres>
operations:
    - type: scaffold
      config:
        project_name: <name of the dbt project>
        default_schema: <this is the schema where dbt will write models if nothing is specified>
    - type: flatten
      config:
        source_schema: <source schema>
        dest_schema: <destination schema>
    - type: unionall
      config:
        output_name: <name of the output model>
        dest_schema: <enter your destination/output schema>
        input:
            - input_type: <"source" or "model">
              input_name: <name of source table or ref model>
              source_name: <name of the source defined in source.yml; will be null for type "model">
            - input_type: <"source" or "model">
              input_name: <name of source table or ref model>
              source_name: <name of the source defined in source.yml; will be null for type "model">
            - input_type: <"source" or "model">
              input_name: <name of source table or ref model>
              source_name: <name of the source defined in source.yml; will be null for type "model">
    - type: syncsources
      config:
        source_name: <top level name of the source in sources.yml file in dbt project. all tables will go under here>
        source_schema: <schema of the source mentioned above>
    - type: flattenjson
      config:
        input: 
          input_type: <"source" or "model">
          input_name: <name of source table or ref model>
          source_name: <name of the source defined in source.yml; will be null for type "model">
        dest_schema: <destination schema>
        output_name: <name of the output model>
        source_columns:
          - <column name>
          - <column name>
          - <column name>
          - ...
        columns_to_copy:
          - column1
          - column2
        json_column: <name of the json column, strings are okay>
        json_columns_to_copy:
          - <json field 1>
          - <json field 2>

    - type: castdatatypes
      config:
        input: 
          input_type: <"source" or "model">
          input_name: <name of source table or ref model>
          source_name: <name of the source defined in source.yml; will be null for type "model">
        dest_schema: <destination schema>
        output_name: <name of the output model>
        source_columns:
          - <column name>
          - <column name>
          - <column name>
          - ...
        columns:
          - columnname: <column name>
            columntype: <type to cast column to>
    - type: coalescecolumns
      config: 
        input: 
          input_type: <"source" or "model">
          input_name: <name of source table or ref model>
          source_name: <name of the source defined in source.yml; will be null for type "model">
        dest_schema: <destination schema>
        output_name: <name of the output model>
        source_columns:
          - <column name>
          - <column name>
          - <column name>
          - ...
        columns:
          - columnname: <first column>
          - columnname: <second column>
          - ...
        output_column_name: <output column name>
    - type: concat
      config: 
        input: 
          input_type: <"source" or "model">
          input_name: <name of source table or ref model>
          source_name: <name of the source defined in source.yml; will be null for type "model">
        dest_schema: <destination schema>
        output_name: <name of the output model>
        source_columns:
          - <column name>
          - <column name>
          - <column name>
          - ...
        columns:
          - name: <string (column or const)>
            is_col: <yes or no>
          - name: <string (column or const)>
            is_col: <yes or no>
          - name: <string (column or const)>
            is_col: <yes or no>
        output_column_name: <output column name>

    - type: arithmetic
      config:
        input: 
          input_type: <"source" or "model">
          input_name: <name of source table or ref model>
          source_name: <name of the source defined in source.yml; will be null for type "model">
        output_name: <enter the name of the output model>
        dest_schema: <enter your destination/output schema>
        operator: <can be "add", "sub", "mul", "div">
        source_columns:
          - <column name>
          - <column name>
          - <column name>
          - ...
        operands:
          - <name of the 1st column>
          - <name of the 2nd column or a const value>
          - <name of the 3nd column or a const value>
        output_column_name: <output column name>
    - type: dropcolumns
      config:
        input: 
          input_type: <"source" or "model">
          input_name: <name of source table or ref model>
          source_name: <name of the source defined in source.yml; will be null for type "model">
        dest_schema:  <destination schema>
        output_name: <name of the output model>
        source_columns:
          - <column name>
          - <column name>
          - <column name>
          - ...
        columns:
          - <column name>
    - type: renamecolumns
      config: 
        input: 
          input_type: <"source" or "model">
          input_name: <name of source table or ref model>
          source_name: <name of the source defined in source.yml; will be null for type "model">
        dest_schema:  <destination schema>
        output_name: <name of the output model>
        source_columns:
          - <column name>
          - <column name>
          - <column name>
              - ...
        columns:
          <old column name>: <new column name>
    - type: regexextraction
      config:
        input: 
          input_type: <"source" or "model">
          input_name: <name of source table or ref model>
          source_name: <name of the source defined in source.yml; will be null for type "model">
        dest_schema:  <destination schema>
        output_name: <name of the output model>
        source_columns:
          - <column name>
          - <column name>
          - <column name>
          - ...
        columns:
          column1: <regex operation>
          column2: <regex operation>

    - type: mergeoperations
      config:
        dest_schema: <destination_schema>
        output_name: mergeoperation
        source_name: <name of the source defined in source.yml; will be null for type "model">
        operations:
          - type: castdatatypes
            config:
              input:
                input_type: <source_type>
                input_name: <source_name>
                source_name: <source_name>
              dest_schema: <intermediate_schema>
              output_name: cast_output
              source_columns:
                - <column name>
                - <column name>
                - <column name>
                - ...
              columns:
                - columnname: <column_name>
                  columntype: <column_type>
          - type: arithmetic
            config:
              input:
                input_type: <source_type>
                input_name: <source_name>
                source_name: <source_name>
              output_name: arithmetic_output
              dest_schema: <intermediate_schema>
              operator: <operator>
              source_columns:
                - <column name>
                - <column name>
                - <column name>
                - ...
              operands:
                - <operand1>
                - <operand2>
                - <operand3>
              output_column_name: <output_column_name>
          - type: coalescecolumns
            config:
              input:
                input_type: <source_type>
                input_name: <source_name>
                source_name: <source_name>
              dest_schema: <intermediate_schema>
              output_name: coalesce_columns
              source_columns:
                - <column name>
                - <column name>
                - <column name>
                - ...
              columns:
                - columnname: <column_name>
                - columnname: <column_name>
              output_column_name: <output_column_name>
          - type: concat
            config:
              input:
                input_type: <source_type>
                input_name: <source_name>
                source_name: <source_name>
              dest_schema: <intermediate_schema>
              output_name: concat
              source_columns:
                - <column name>
                - <column name>
                - <column name>
                - ...
              columns:
                - name: <column_name>
                  is_col: <yes_or_no>
                - name: <column_name>
                  is_col: <yes_or_no>
                - name: <column_name>
                  is_col: <yes_or_no>
              output_column_name: <output_column_name>
          - type: dropcolumns
            config:
              input:
                input_type: <source_type>
                input_name: <source_name>
                source_name: <source_name>
              dest_schema: <intermediate_schema>
              output_name: drop_column
              source_columns:
                - <column name>
                - <column name>
                - <column name>
          - ...
              columns:
                - <column_name>
          - type: renamecolumns
            config:
              input:
                input_type: <source_type>
                input_name: <source_name>
                source_name: <source_name>
              dest_schema: <intermediate_schema>
              output_name: rename_column
              source_columns:
                - <column name>
                - <column name>
                - <column name>
                - ...
              columns:
                <old_column_name>: <new_column_name>
          - type: flattenjson
            config:
              input:
                input_type: <source_type>
                input_name: <source_name>
                source_name: <source_name>
              dest_schema: <intermediate_schema>
              output_name: flatten_json
              source_columns:
                - <column name>
                - <column name>
                - <column name>
                - ...
              columns_to_copy:
                - <column_name>
                - <column_name>
              json_column: <json_column>
              json_columns_to_copy:
                - <json_column_name>
                - <json_column_name>
          - type: regexextraction
            config:
              input:
                input_type: <source_type>
                input_name: <source_name>
                source_name: <source_name>
              dest_schema: <intermediate_schema>
              output_name: regex_extraction
              source_columns:
                - <column name>
                - <column name>
                - <column name>
                - ...
              columns:
                <column_name>: <regex_pattern>
                <column_name>: <regex_pattern>